{"mappings":"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","sources":["src/index.js","src/js/fetchMovies.js","src/js/loadPage.js","src/js/visitEvents.js","src/js/lazy-loading.js"],"sourcesContent":["import './js/common';\nimport './js/fetchMovies';\nimport './js/arrowUp';\nimport './js/loadPage';\nimport './js/pageInStorage';\nimport './js/modal';\nimport './js/pagination';\nimport './js/modalFooter';\nimport './js/storage';\nimport './js/visitEvents';\nimport './js/lazy-loading';\n\n","import storage from './storage';\nimport { storagePage,STORAGE_MOVIES_SEARCH,storageLastSearchText } from './pageInStorage';\n\nconst formField = document.querySelector('.form-field');\nconst homeList = document.querySelector('.home-list');\nconst spinner = document.querySelector('.spinner-loader');\nconst textError = document.querySelector('.search-result');\nlet movieName = '';\nlet page = 1;\n\nformField?.addEventListener('submit', event => {\n  event.preventDefault();\n  textError.classList.add('is-hidden');\n  spinner.classList.remove('is-hidden');\n  movieName = formField.elements.query.value.trim(); \n  if (movieName === '') {\n    spinner.classList.add('is-hidden');\n    return alert('Empty field');\n  }\n  fetchMovies(movieName).then(({ movies }) => {\n    if (movies.length === 0) {\n      spinner.classList.add('is-hidden');\n      textError.classList.remove('is-hidden');\n      return;\n    }\n    storage.save(STORAGE_MOVIES_SEARCH,{movie: movieName});\n    storage.save('movies', movies);\n    homeList.innerHTML = movieCards(movies);\n    spinner.classList.add('is-hidden');\n     setTimeout(() => {\n      const arr = document.querySelectorAll('.placeholdify');\n      arr.forEach(el => el.classList.remove('placeholdify'));\n      },2000);\n  });\n});\n\nexport function movieCards(movies) {\n  return movies\n    .map(({ id, poster_path, title, original_title, genres_ids, release_date }) => {\n      const imgUrl = poster_path\n        ? `https://image.tmdb.org/t/p/w500${poster_path}`\n        : // : './images/netuNichego.png';\n          'https://via.placeholder.com/395x574/FFFFFF/FF001B?text=No+poster';\n      const year = new Date(release_date).getFullYear();\n      return `<li class=\"home-card js-modal-open placeholdify\" data-card-movie-id=\"${id}\">\n            <a href=\"#\" class=\"home-card__link\">\n                <div class=\"card-info\">\n                    <img class=\"home-card__img\" src=\"${imgUrl}\" alt=\"${title}\">\n                    <h2 class=\"card-info__title\">${original_title}</h2>\n                    <p class=\"card-info_descr\">\n                        <span>${genres_ids}</span>\n                        |\n                        <span>${year}</span>\n                    </p>\n                </div>\n            </a>\n        </li>`;\n    })\n    .join('');\n}\n   \n \n\nasync function fetchMovies(movieName,page) {\n  const searchParams = new URLSearchParams({\n    api_key: '659c146febfafc17fd54baa17527f7fa',\n    language: 'en-US',\n    query: movieName,\n  });\n\n  return fetch(`https://api.themoviedb.org/3/search/movie?${searchParams}&page=${page}`)\n    .then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n      throw new Error(res.statusText);\n    })\n    .then(data => {\n      return {\n        movies: data.results,\n      };\n    });\n      \n}\n\n\n//load last page search\nexport function loadStoragePage() {      \n  textError.classList.add('is-hidden');\n  spinner.classList.remove('is-hidden');\n  movieName = storageLastSearchText?.movie;\n  page = storagePage?.value;\n  if (movieName === '') {\n    spinner.classList.add('is-hidden');\n    return alert('Empty field');\n  }\n   fetchMovies(movieName).then(({ movies }) => {\n    if (movies.length === 0) {\n      spinner.classList.add('is-hidden');\n      textError.classList.remove('is-hidden');\n      return;\n    }    \n    storage.save('movies', movies);\n    homeList.innerHTML = movieCards(movies);\n    spinner.classList.add('is-hidden');\n     setTimeout(() => {\n      const arr = document.querySelectorAll('.placeholdify');\n      arr.forEach(el => el.classList.remove('placeholdify'));\n      },2000);\n  });\n};\n \n\n","import storage from './storage';\nimport { currentPage, defineResultsPerPage } from './pagination';\n\n\nconst KEY = '659c146febfafc17fd54baa17527f7fa';\nconst homeList = document.querySelector('.home-list');\n\nconst API_URL_POPULAR = `https://api.themoviedb.org/3/trending/movie/week?api_key=${KEY}`;\n\n\nasync function fetchFilms(API_URL_POPULAR) {\n\n  let response = await fetch(\n    `${API_URL_POPULAR}`\n  );\n  return response.json();\n}\n\nasync function fetchGenres() {\n  let response = await fetch(\n    `https://api.themoviedb.org/3/genre/movie/list?api_key=${KEY}&language=en-US`\n  );\n  return response.json();\n}\n\nfetchGenres().then(({ genres }) => {\n  const arr = [...genres];\n  localStorage.setItem('arrow', JSON.stringify(arr));\n});\nconst values = storage.load('arrow');\n\n\n fetchFilms(API_URL_POPULAR).then(({ results }) => {\n\n  results.poster_path;\n\n\n  const mark = results\n    .map(\n      ({\n        id,\n        poster_path,\n        title,\n        original_title,\n        genre_ids,\n        release_date,\n        original_name,\n        first_air_date,\n      }) => {\n        const genreArr = [];\n        let other = '';\n        for (const genreId of genre_ids) {\n          for (const value of values) {\n            if (genreId === value.id) {\n              genreArr.push(value.name);\n              if (genre_ids.length > 2) {\n                other = ',Other';\n              }\n            }\n          }\n        }\n\n        let a = release_date;\n\n        let b = first_air_date;\n        if (release_date) {\n          a = a.slice(0, 4);\n        }\n        if (first_air_date) {\n          b = b.slice(0, 4);\n        }\n\n        const imgUrl = `https://image.tmdb.org/t/p/w500${poster_path}`;\n        return `<li class=\"home-card js-modal-open placeholdify\" data-card-movie-id=\"${id}\">\n            <a href=\"#\" class=\"home-card__link\">\n                <div class=\"card-info\">\n                    <img class=\"home-card__img\" src=\"${imgUrl}\" alt=\"${title}\">\n                    <h2 class=\"card-info__title\">${original_title || original_name}</h2>\n                    <p class=\"card-info_descr\">\n                        <span>${genreArr.splice(0, 3)}  ${other}</span>\n                        \n                        |\n                        <span>${a || b}</span>\n                    </p>\n                </div>\n            </a>\n        </li>`;\n      }\n  )\n    \n      .join('');\n     setTimeout(() => {\n      const arr = document.querySelectorAll('.placeholdify');\n      arr.forEach(el => el.classList.remove('placeholdify'));\n      },2000);\n  storage.save('movies', results);\n    homeList.insertAdjacentHTML('beforeend', mark);\n});\n\nexport default fetchFilms();\n\n","import { storagePage } from './pageInStorage';\nimport * as page from './pagination';\nimport { loadStoragePage } from './fetchMovies';\n\n\n export const refs = {\n    comeBackBtn: document.querySelector('button.js-visit-back-btn'),\n    visitModal: document.querySelector(\"[data-modal].dialog\"),   \n    visitCloseBtn: document.querySelector(\"button.js-visit-close-btn\"),\n};\n    refs.comeBackBtn.addEventListener(\"click\", comeBackBtnToggle); \n    refs.visitCloseBtn.addEventListener(\"click\", toggleModal);\n    \n    \nlet timerId;\n(() => {\n    if (page.currentPage == 1 || storagePage?.value === undefined) {\n        return \n    } else {        \n        toggleModal();\n        return timerId = setTimeout(() => { toggleModal() }, 15000);      \n    }\n})();    \n\n\nfunction toggleModal() {   \n    refs.visitModal.classList.toggle(\"is-hidden\");     \n    \n    if (refs.visitModal.classList.value.includes(\"hidden\") === true) {\n           clearTimeout(timerId);  \n        refs.comeBackBtn.removeEventListener(\"click\", comeBackBtnToggle);        \n        refs.visitCloseBtn.removeEventListener(\"click\", toggleModal);\n    };\n};\n\n function comeBackBtnToggle() {   \n    refs.visitModal.classList.toggle(\"is-hidden\");     \n    loadStoragePage()\n    if (refs.visitModal.classList.value.includes(\"hidden\") === true) {\n           clearTimeout(timerId);  \n        refs.comeBackBtn.removeEventListener(\"click\", comeBackBtnToggle);        \n        refs.visitCloseBtn.removeEventListener(\"click\", toggleModal);\n    };\n};\n","// import loadPage from './loadPage';\n// import { fetchFilms } from './loadPage';\n\n// 1. Для кожного зображення додати loading='lazy'\n// 2. Для того, щоб працювало в усіх браузерах, потрібна бібліотека lazysizes(знайти на git hub)\n// можна використати CDN lazysizes.min.js  , додати скрипт динамічно\n// - додати всім зображенням class='lazyload'\n// - src замінити на data-src\n// 3. видаляємо слухача за допомогою 'once'(підтримується майже всіма браузерами), додається в опції. Після того як\n// addEventListener спрацює один раз, він самовидалиться\n\n\n// Feature detection\nif ('loading' in HTMLImageElement.prototype) {\n    console.log('Браузер підтримує lazyload');\n    const lazyImages = document.querySelectorAll('image[loading=\"lazy\"]');\n    lazyImages.forEach(image => {\n        image.src = image.dataset.src;\n    });\n// supported in browser\n} else {\n    console.log('Браузер не підтримує lazyload');\n    const script = document.createElement('script');\n    script.src = 'https://cdnjs.cloudflare.com/ajax/libs/lazysizes/5.3.2/lazysizes.min.js';\n    script.integrity = 'sha512-q583ppKrCRc7N5O0n2nzUiJ+suUv7Et1JGels4bXOaMFQcamPk9HjdUknZuuFjBNs7tsMuadge5k9RzdmO+1GQ==';\n    script.crossOrigin = 'anonymous';\n    script.referrerpolicy = 'no-referrer';\n    document.body.appendChild(script);\n// fetch polyfill/third-party library\n}\n\nconst lazyImages = document.querySelectorAll('image[data-src]');\n    console.log(lazyImages);\n\n    lazyImages.forEach(image => {\n    image.addEventListener('load', onImageLoaded, { once: true });\n});\n\nfunction onImageLoaded(event) {\n    console.log(\"Зображення завантажилось\");\n// можна додати класс, анімацію і тд\n// event.target.classList.add();\n}"],"names":["parcelRequire","$5uEKZ","$16230cf6cab73dd4$var$formField","document","querySelector","$16230cf6cab73dd4$var$homeList","$16230cf6cab73dd4$var$spinner","$16230cf6cab73dd4$var$textError","$16230cf6cab73dd4$var$movieName","$16230cf6cab73dd4$var$page","$16230cf6cab73dd4$export$867842ca7ae981de","movies","map","id","poster_path","title","original_title","genres_ids","release_date","Date","getFullYear","join","async","$16230cf6cab73dd4$var$fetchMovies","movieName1","page1","searchParams","URLSearchParams","api_key","language","query","fetch","then","res","ok","json","Error","statusText","data","results","$16230cf6cab73dd4$export$588d92c3164a0c5a","classList","add","remove","$ijW3m","storageLastSearchText","movie","storagePage","value","alert","length","default","save","innerHTML","setTimeout","querySelectorAll","forEach","el","addEventListener","event","preventDefault","elements","trim","STORAGE_MOVIES_SEARCH","$8a393290a593310b$var$homeList","$8a393290a593310b$var$fetchFilms","API_URL_POPULAR1","$8a393290a593310b$var$fetchGenres","genres","arr","localStorage","setItem","JSON","stringify","$8a393290a593310b$var$values","load","mark","genre_ids","original_name","first_air_date","genreArr","other","genreId","push","name","a","b","slice","splice","insertAdjacentHTML","$ffef372a5b1a0ba3$export$21666b427502ea6d","comeBackBtn","visitModal","visitCloseBtn","$ffef372a5b1a0ba3$var$timerId","$ffef372a5b1a0ba3$var$toggleModal","toggle","includes","clearTimeout","removeEventListener","$ffef372a5b1a0ba3$var$comeBackBtnToggle","$2nhTy","currentPage","undefined","HTMLImageElement","prototype","console","log","image","src","dataset","script","createElement","integrity","crossOrigin","referrerpolicy","body","appendChild","$ead53d6c8d8f066c$var$lazyImages","$ead53d6c8d8f066c$var$onImageLoaded","once"],"version":3,"file":"index.f1745da3.js.map"}