{"mappings":"AAAA,MCAMA,EAAYC,SAASC,cAAc,eACnCC,EAAWF,SAASC,cAAc,cAClCE,EAAUH,SAASC,cAAc,mBACvC,IAAIG,EAAY,GAEhBL,EAAUM,iBAAiB,UAAUC,IAInC,GAHAA,EAAMC,iBACNJ,EAAQK,UAAUC,OAAO,aACzBL,EAAYL,EAAUW,SAASC,MAAMC,MAAMC,OACzB,KAAdT,EACF,OAAOU,MAAM,gBA6BjB,SAAsBC,GACpB,MAAMC,EAAe,IAAIC,gBAAgB,CACvCC,QAAS,mCACTC,SAAU,QACVR,MAAOI,IAGT,OAAOK,MAAM,6CAA6CJ,KACvDK,MAAKC,IACJ,GAAIA,EAAIC,GACN,OAAOD,EAAIE,OAEb,MAAM,IAAIC,MAAMH,EAAII,eAErBL,MAAKM,IACG,CACLC,OAAQD,EAAKE,aA3CnBC,CAAY1B,GAAWiB,MAAK,EAACO,OAAEA,MAC7B1B,EAAS6B,UAKb,SAAqBH,GACnB,OAAOA,EACJI,KAAI,EAACC,YAAEA,EAAWC,MAAEA,EAAKC,eAAEA,EAAcC,WAAEA,EAAUC,aAAEA,KAE7C,yLADQ,kCAAkCJ,aAIcC,yDACpBC,0FAEnBC,sEAEAC,gGAM3BC,KAAK,IAvBeC,CAAWX,GAChCzB,EAAQK,UAAUgC,IAAI,oBCX1BC,eAA0BC,EAAKC,EAAYC,GAIzC,aAHqBxB,MACnB,yDAAyDsB,gBAAkBC,iBAA0BC,MAEvFpB,QAElBqB,CATY,mCACO,QACC,QAOqBxB,MAAK,EAACQ,QAAEA,MAC/CiB,QAAQC,IAAIlB,M,ICgBdmB,EAAe,C,KA1BF,CAACC,EAAKrC,KACjB,IACE,MAAMsC,EAAkBC,KAAKC,UAAUxC,GACvCyC,aAAaC,QAAQL,EAAKC,GAC1B,MAAOK,GACPT,QAAQS,MAAM,oBAAqBA,EAAMC,W,KAIhCP,IACX,IACE,MAAMC,EAAkBG,aAAaI,QAAQR,GAC7C,OAA2B,OAApBC,OAA2BQ,EAAYP,KAAKQ,MAAMT,GACzD,MAAOK,GACPT,QAAQS,MAAM,oBAAqBA,EAAMC,W,OAI9BP,IACX,IACoC,OAA9BI,aAAaI,QAAQR,IAAiBI,aAAaO,WAAWX,GAClE,MAAOM,GACLT,QAAQS,MAAM,uBAAwBA,EAAMC,YCnBhCR,EAAQa,KADH","sources":["src/js/common.js","src/js/fetchMovies.js","src/js/loadPage.js","src/js/storage.js","src/js/pageInStorage.js"],"sourcesContent":["const KEY = '659c146febfafc17fd54baa17527f7fa';","const formField = document.querySelector('.form-field');\nconst homeList = document.querySelector('.home-list');\nconst spinner = document.querySelector('.spinner-loader');\nlet movieName = '';\n\nformField.addEventListener('submit', event => {\n  event.preventDefault();\n  spinner.classList.remove('is-hidden');\n  movieName = formField.elements.query.value.trim();\n  if (movieName === '') {\n    return alert('Empty field');\n  }\n  fetchMovies(movieName).then(({ movies }) => {\n    homeList.innerHTML = movieCards(movies);\n    spinner.classList.add('is-hidden');\n  });\n});\n\nfunction movieCards (movies) {\n  return movies\n    .map(({ poster_path, title, original_title, genres_ids, release_date }) => {\n        const imgUrl = `https://image.tmdb.org/t/p/w500${poster_path}`;\n        return `<li class=\"home-card js-modal-open\">\n            <a href=\"#\" class=\"home-card__link\">\n                <div class=\"card-info\">\n                    <img class=\"home-card__img\" src=\"${imgUrl}\" alt=\"${title}\">\n                    <h2 class=\"card-info__title\">${original_title}</h2>\n                    <p class=\"card-info_descr\">\n                        <span>${genres_ids}</span>\n                        |\n                        <span>${release_date}</span>\n                    </p>\n                </div>\n            </a>\n        </li>`;\n    })\n    .join('');\n};\n\nfunction fetchMovies (movieName){\n  const searchParams = new URLSearchParams({\n    api_key: '659c146febfafc17fd54baa17527f7fa',\n    language: 'en-US',\n    query: movieName,\n  });\n\n  return fetch(`https://api.themoviedb.org/3/search/movie?${searchParams}`)\n    .then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n      throw new Error(res.statusText);\n    })\n    .then(data => {\n      return {\n        movies: data.results\n      };\n    });\n};","const KEY = '659c146febfafc17fd54baa17527f7fa';\nconst MEDIA_TYPE = 'movie';\nconst TIME_WINDOW = 'week';\nasync function fetchFilms(KEY, MEDIA_TYPE, TIME_WINDOW) {\n  let response = await fetch(\n    `https://api.themoviedb.org/3/trending/all/day?api_key=${KEY}&media_type=${MEDIA_TYPE}&time_window=${TIME_WINDOW}`\n  );\n  return response.json();\n}\nfetchFilms(KEY, MEDIA_TYPE, TIME_WINDOW).then(({ results }) => {\n  console.log(results);\n});\n","const save = (key, value) => {\n  try {\n    const serializedState = JSON.stringify(value);\n    localStorage.setItem(key, serializedState);\n  } catch (error) {\n    console.error(\"Set state error: \", error.message);\n  }\n};\n\nconst load = key => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    return serializedState === null ? undefined : JSON.parse(serializedState);\n  } catch (error) {\n    console.error(\"Get state error: \", error.message);\n  }\n};\n\nconst remove = key => {\n    try { \n      if (localStorage.getItem(key) !== null) { localStorage.removeItem(key); }\n    } catch (error) {\n        console.error(\"Remove state error: \", error.message);\n    }\n};\n\nexport default {\n  save,\n  load,\n  remove,\n};\n","import storage from './storage'\n\nconst STORAGE_PAGE_KEY = \"Start on last visit page?\";\nconst storagePage = storage.load(STORAGE_PAGE_KEY)\n\nfunction changeStoragePage() {\n    if (page > 1 && page !== storagePage.value) {        \n        storage.remove(STORAGE_PAGE_KEY);\n        storage.save(STORAGE_PAGE_KEY, { value: page });\n    }    \n}\nfunction loadStoragePage() { \n    page = storagePage.value\n}\n"],"names":["$16230cf6cab73dd4$var$formField","document","querySelector","$16230cf6cab73dd4$var$homeList","$16230cf6cab73dd4$var$spinner","$16230cf6cab73dd4$var$movieName","addEventListener","event","preventDefault","classList","remove","elements","query","value","trim","alert","movieName1","searchParams","URLSearchParams","api_key","language","fetch","then","res","ok","json","Error","statusText","data","movies","results","$16230cf6cab73dd4$var$fetchMovies","innerHTML","map","poster_path","title","original_title","genres_ids","release_date","join","$16230cf6cab73dd4$var$movieCards","add","async","KEY1","MEDIA_TYPE1","TIME_WINDOW1","$8a393290a593310b$var$fetchFilms","console","log","$3fff5e8daf4b13a6$export$2e2bcd8739ae039","key","serializedState","JSON","stringify","localStorage","setItem","error","message","getItem","undefined","parse","removeItem","load"],"version":3,"file":"index.4e3e7aed.js.map"}