{"mappings":"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","sources":["src/js/storage.js","src/js/fetchMovies.js","src/js/loadPage.js","src/js/pageInStorage.js","src/js/modal.js"],"sourcesContent":["const save = (key, value) => {\n  try {\n    const serializedState = JSON.stringify(value);\n    localStorage.setItem(key, serializedState);\n  } catch (error) {\n    console.error(\"Set state error: \", error.message);\n  }\n};\n\nconst load = key => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    return serializedState === null ? undefined : JSON.parse(serializedState);\n  } catch (error) {\n    console.error(\"Get state error: \", error.message);\n  }\n};\n\nconst remove = key => {\n    try { \n      if (localStorage.getItem(key) !== null) { localStorage.removeItem(key); }\n    } catch (error) {\n        console.error(\"Remove state error: \", error.message);\n    }\n};\n\nexport default {\n  save,\n  load,\n  remove,\n};\n","import storage from './storage';\n\nconst formField = document.querySelector('.form-field');\nconst homeList = document.querySelector('.home-list');\nconst spinner = document.querySelector('.spinner-loader');\nlet movieName = '';\n\nformField.addEventListener('submit', event => {\n  event.preventDefault();\n  spinner.classList.remove('is-hidden');\n  movieName = formField.elements.query.value.trim();\n  if (movieName === '') {\n    spinner.classList.add('is-hidden');\n    return alert('Empty field');\n  }\n  fetchMovies(movieName).then(({ movies }) => {\n    storage.save('movies', movies);\n    homeList.innerHTML = movieCards(movies);\n    spinner.classList.add('is-hidden');\n  });\n});\n\nexport function movieCards(movies) {\n  return movies\n    .map(\n      ({\n        id,\n        poster_path,\n        title,\n        original_title,\n        genres_ids,\n        release_date,\n      }) => {\n        const imgUrl = `https://image.tmdb.org/t/p/w500${poster_path}`;\n        const year = new Date(release_date).getFullYear();\n        return `<li class=\"home-card js-modal-open\" data-card-movie-id=\"${id}\">\n            <a href=\"#\" class=\"home-card__link\">\n                <div class=\"card-info\">\n                    <img class=\"home-card__img\" src=\"${imgUrl}\" alt=\"${title}\">\n                    <h2 class=\"card-info__title\">${original_title}</h2>\n                    <p class=\"card-info_descr\">\n                        <span>${genres_ids}</span>\n                        |\n                        <span>${year}</span>\n                    </p>\n                </div>\n            </a>\n        </li>`;\n      }\n    )\n    .join('');\n}\n\nasync function fetchMovies(movieName) {\n  const searchParams = new URLSearchParams({\n    api_key: '659c146febfafc17fd54baa17527f7fa',\n    language: 'en-US',\n    query: movieName,\n  });\n\n  return fetch(`https://api.themoviedb.org/3/search/movie?${searchParams}`)\n    .then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n      throw new Error(res.statusText);\n    })\n    .then(data => {\n      return {\n        movies: data.results,\n      };\n    });\n}\n","import storage from './storage';\nconst KEY = '659c146febfafc17fd54baa17527f7fa';\nconst MEDIA_TYPE = 'movie';\nconst TIME_WINDOW = 'week';\nconst homeList = document.querySelector('.home-list');\nasync function fetchFilms(KEY, MEDIA_TYPE, TIME_WINDOW) {\n  let response = await fetch(\n    `https://api.themoviedb.org/3/trending/all/day?api_key=${KEY}&media_type=${MEDIA_TYPE}&time_window=${TIME_WINDOW}`\n  );\n  return response.json();\n}\nasync function fetchGenres() {\n  let response = await fetch(\n    `https://api.themoviedb.org/3/genre/movie/list?api_key=${KEY}&language=en-US`\n  );\n  return response.json();\n}\nfetchGenres().then(({ genres }) => {\n  const arr = [...genres];\n  localStorage.setItem('arrow', JSON.stringify(arr));\n});\n\n// const array = [\n//   { id: 28, name: 'Action' },\n//   { id: 12, name: 'Adventure' },\n//   { id: 16, name: 'Animation' },\n//   { id: 35, name: 'Comedy' },\n//   { id: 80, name: 'Crime' },\n//   { id: 99, name: 'Documentary' },\n//   { id: 18, name: 'Drama' },\n//   { id: 10751, name: 'Family' },\n//   { id: 14, name: 'Fantasy' },\n//   { id: 36, name: 'History' },\n//   { id: 27, name: 'Horror' },\n//   { id: 10402, name: 'Music' },\n//   { id: 9648, name: 'Mystery' },\n//   { id: 10749, name: 'Romance' },\n//   { id: 878, name: 'Science Fiction' },\n//   { id: 10770, name: 'TV Movie' },\n//   { id: 53, name: 'Thriller' },\n//   { id: 10752, name: 'War' },\n//   { id: 37, name: 'Western' },\n// ];\n\nfetchFilms(KEY, MEDIA_TYPE, TIME_WINDOW).then(({ results }) => {\n  results.poster_path;\n\n  const mark = results\n    .map(\n      ({\n        poster_path,\n        title,\n        original_title,\n        genre_ids,\n        release_date,\n        original_name,\n        first_air_date,\n      }) => {\n        const value = storage.load('arrow').find(arr => {});\n\n        let a = release_date;\n\n        let b = first_air_date;\n        if (release_date) {\n          a = a.slice(0, 4);\n        }\n        if (first_air_date) {\n          b = b.slice(0, 4);\n        }\n        const imgUrl = `https://image.tmdb.org/t/p/w500${poster_path}`;\n        return `<li class=\"home-card\">\n            <a href=\"#\" class=\"home-card__link\">\n                <div class=\"card-info\">\n                    <img class=\"home-card__img\" src=\"${imgUrl}\" alt=\"${title}\">\n                    <h2 class=\"card-info__title\">${\n                      original_title || original_name\n                    }</h2>\n                    <p class=\"card-info_descr\">\n                        <span>${genre_ids}</span>\n                        |\n                        <span>${a || b}</span>\n                    </p>\n                </div>\n            </a>\n        </li>`;\n      }\n    )\n    .join('');\n  homeList.insertAdjacentHTML('beforeend', mark);\n});\n","import storage from './storage'\n\nconst STORAGE_PAGE_KEY = \"Start on last visit page?\";\nconst storagePage = storage.load(STORAGE_PAGE_KEY)\n\nfunction changeStoragePage() {\n    if (page > 1 && page !== storagePage.value) {        \n        storage.remove(STORAGE_PAGE_KEY);\n        storage.save(STORAGE_PAGE_KEY, { value: page });\n    }    \n}\nfunction loadStoragePage() { \n    page = storagePage.value\n}\n","import storage from './storage';\n\nconst backdrop = document.querySelector('[data-modal]');\nconst closeButton = document.querySelector('[data-modal-close]');\nconst cardsContainer = document.querySelector('.home-container');\n\ncardsContainer.addEventListener('click', e => {\n  //Тиць по 'js-modal-open' -> відкриває модалку\n  if (e.target.closest('.js-modal-open')) {\n    e.preventDefault();\n    openModal(e.target.closest('.js-modal-open').dataset.cardMovieId);\n  }\n});\n\n// Тиць по 'data-modal-close' ->закриває модалку\ncloseButton.addEventListener('click', closeModal);\n\n//Press по Esc ->закриває модалку\nfunction pressEsc(e) {\n  if (e.code === 'Escape') {\n    closeModal();\n  }\n}\n\n// Тиць по backdrop -> закриває модалку\nbackdrop.addEventListener('click', backdropClick);\n\nfunction backdropClick(e) {\n  if (e.currentTarget === e.target) {\n    closeModal();\n    return;\n  }\n  if (e.target.nodeName === 'BUTTON') {\n    addMovieToLibrary(e.target);\n  }\n}\n\n// Якщо модалка відкрита -> кидаємо AddEventListener\nfunction openModal(movieId) {\n  document.addEventListener('keydown', pressEsc);\n\n  backdrop.querySelector('.modal-movie').dataset.modalMovieId = movieId;\n  backdrop.querySelector('.modal-movie').innerHTML =\n    getModalMovieMarkup(movieId);\n  backdrop.classList.remove('is-hidden');\n}\n\n// Як тільки закривається модалка -> знімаємо EventListener\nfunction closeModal() {\n  document.addEventListener('keydown', pressEsc);\n  backdrop.classList.add('is-hidden');\n}\n\nfunction getModalMovieMarkup(movieId) {\n  const {\n    poster_path,\n    title,\n    original_title,\n    genres_ids,\n    release_date,\n    vote_average,\n    vote_count,\n    popularity,\n    overview,\n  } = storage.load('movies')?.find(movie => movie.id.toString() === movieId);\n\n  // movieId = movieId.toString();\n\n  const btnAddToWatched = isInLibrary('watched-list', movieId.toString())\n    ? `<button class=\"modal-movie__watched added\" data-modal-add-to=\"watched\">REMOVE FROM<br>WATCHED</button>`\n    : `<button class=\"modal-movie__watched\" data-modal-add-to=\"watched\">ADD TO<br>WATCHED</button>`;\n\n  const btnAddToQueue = isInLibrary('queue-list', movieId.toString())\n    ? `<button class=\"modal-movie__queue added\" data-modal-add-to=\"queue\">REMOVE FROM<br>QUEUE</button>`\n    : `<button class=\"modal-movie__queue\" data-modal-add-to=\"queue\">ADD TO<br>QUEUE</button>`;\n\n  return `<img class=\"modal-movie__poster\" src='https://image.tmdb.org/t/p/w500${poster_path}' alt=\"${title}\" />\n            <div class=\"modal-movie__info\">\n                <h2 class=\"modal-movie__title\">${title}</h2>\n                <table class=\"movie-table\">\n                    <tr>\n                        <td class=\"movie-table__title\">Vote / Votes</td>\n                        <td class=\"movie-table__info\">\n                            <span class=\"vote\">${vote_average}</span>\n                            <span>/</span>\n                            <span class=\"votes\">${vote_count}</span>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td class=\"movie-table__title\">Popularity</td>\n                        <td class=\"movie-table__info\">${popularity}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"movie-table__title\">Original Title</td>\n                        <td class=\"movie-table__info\">${original_title}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"movie-table__title\">Genre</td>\n                        <td class=\"movie-table__info\">${genres_ids}</td>\n                    </tr>\n                </table>\n                <div class=\"modal-movie__box\">\n                <div class=\"modal-movie__about\">\n                    <p class=\"modal-movie__description\">ABOUT</p>\n                    <p class=\"modal-movie__text\">${overview}</p>\n                </div>\n                <div class=\"modal-movie__buttons\">\n                    ${btnAddToWatched}\n                    ${btnAddToQueue}\n                </div>\n                </div>\n            </div>`;\n}\n\n/* -----------------------\n\nModal buttons functionality\n\n----------------------- */\n\nfunction addMovieToLibrary(button) {\n  const key = button.dataset?.modalAddTo + '-list';\n  const movieId = button.closest('.modal-movie').dataset.modalMovieId;\n\n  const value = storage\n    .load('movies')\n    ?.find(movie => movie.id.toString() === movieId);\n  // console.dir(value.id);\n\n  let currentList = storage.load(key) || [];\n  // console.dir(currentList);\n\n  if (storage.load(key) && isInLibrary(key, value.id.toString())) {\n    button.classList.remove('added');\n    console.log(button.innerHTML);\n    button.innerHTML = button.innerHTML.replace('REMOVE FROM', 'ADD TO');\n    currentList = currentList.filter(movie => movie.id.toString() != value.id);\n  } else {\n    currentList.push(value);\n    console.log(button.innerHTML);\n    button.innerHTML = button.innerHTML.replace('ADD TO', 'REMOVE FROM');\n    button.classList.add('added');\n  }\n\n  storage.save(key, currentList);\n}\n\nfunction isInLibrary(storageKey, valueId) {\n  return storage\n    .load(storageKey)\n    ?.some(movie => movie.id.toString() === valueId);\n}\n"],"names":["$3fff5e8daf4b13a6$export$2e2bcd8739ae039","key","value","serializedState","JSON","stringify","localStorage","setItem","error","console","message","getItem","undefined","parse","removeItem","$16230cf6cab73dd4$var$formField","document","querySelector","$16230cf6cab73dd4$var$homeList","$16230cf6cab73dd4$var$spinner","$16230cf6cab73dd4$var$movieName","addEventListener","event","preventDefault","classList","remove","elements","query","trim","add","alert","async","movieName1","searchParams","URLSearchParams","api_key","language","fetch","then","res","ok","json","Error","statusText","data","movies","results","$16230cf6cab73dd4$var$fetchMovies","save","innerHTML","map","id","poster_path","title","original_title","genres_ids","release_date","Date","getFullYear","join","$16230cf6cab73dd4$export$867842ca7ae981de","$8a393290a593310b$var$homeList","$8a393290a593310b$var$fetchGenres","genres","arr","KEY1","MEDIA_TYPE1","TIME_WINDOW1","$8a393290a593310b$var$fetchFilms","mark","genre_ids","original_name","first_air_date","load","find","a","b","slice","insertAdjacentHTML","$8a7e756c566dd1ea$var$backdrop","$8a7e756c566dd1ea$var$closeButton","$8a7e756c566dd1ea$var$pressEsc","e","code","$8a7e756c566dd1ea$var$closeModal","$8a7e756c566dd1ea$var$isInLibrary","storageKey","valueId","ref","some","movie","toString","movieId","target","closest","dataset","cardMovieId","modalMovieId","vote_average","vote_count","popularity","overview","btnAddToWatched","btnAddToQueue","$8a7e756c566dd1ea$var$getModalMovieMarkup","currentTarget","nodeName","button","ref1","modalAddTo","currentList","log","replace","filter","push","$8a7e756c566dd1ea$var$addMovieToLibrary"],"version":3,"file":"index.d2ffb84d.js.map"}