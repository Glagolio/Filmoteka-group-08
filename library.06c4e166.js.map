{"mappings":"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","sources":["src/js/storage.js","src/js/pageInStorage.js","src/js/modal.js","src/js/fetchMovies.js","src/js/renderLibMovie.js"],"sourcesContent":["const save = (key, value) => {\n  try {\n    const serializedState = JSON.stringify(value);\n    localStorage.setItem(key, serializedState);\n  } catch (error) {\n    console.error(\"Set state error: \", error.message);\n  }\n};\n\nconst load = key => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    return serializedState === null ? undefined : JSON.parse(serializedState);\n  } catch (error) {\n    console.error(\"Get state error: \", error.message);\n  }\n};\n\nconst remove = key => {\n    try { \n      if (localStorage.getItem(key) !== null) { localStorage.removeItem(key); }\n    } catch (error) {\n        console.error(\"Remove state error: \", error.message);\n    }\n};\n\nexport default {\n  save,\n  load,\n  remove,\n};\n","import storage from './storage';\n\nexport const STORAGE_PAGE_KEY = 'last visit page';\nexport const storagePage = storage.load(STORAGE_PAGE_KEY);\n\ncurrentPage = 2;\n\nchangeStoragePage();\n\nfunction changeStoragePage() {\n  if (currentPage > 1 && currentPage !== storagePage?.value) {\n    storage.remove(STORAGE_PAGE_KEY);\n    storage.save(STORAGE_PAGE_KEY, { value: currentPage });\n  }\n}\n","import storage from './storage';\n\nconst backdrop = document.querySelector('[data-modal]');\nconst closeButton = document.querySelector('[data-modal-close]');\nconst cardsContainer = document.querySelector('.home-container');\n\ncardsContainer.addEventListener('click', e => {\n  //Тиць по 'js-modal-open' -> відкриває модалку\n  if (e.target.closest('.js-modal-open')) {\n    e.preventDefault();\n    openModal(e.target.closest('.js-modal-open').dataset.cardMovieId);\n  }\n});\n\n// Тиць по 'data-modal-close' ->закриває модалку\ncloseButton.addEventListener('click', closeModal);\n\n//Press по Esc ->закриває модалку\nfunction pressEsc(e) {\n  if (e.code === 'Escape') {\n    closeModal();\n  }\n}\n\n// Тиць по backdrop -> закриває модалку\nbackdrop.addEventListener('click', backdropClick);\n\nfunction backdropClick(e) {\n  if (e.currentTarget === e.target) {\n    closeModal();\n    return;\n  }\n  if (e.target.nodeName === 'BUTTON') {\n    addMovieToLibrary(e.target);\n  }\n}\n\n// Якщо модалка відкрита -> кидаємо AddEventListener\nfunction openModal(movieId) {\n  document.addEventListener('keydown', pressEsc);\n\n  backdrop.querySelector('.modal-movie').dataset.modalMovieId = movieId;\n  backdrop.querySelector('.modal-movie').innerHTML =\n    getModalMovieMarkup(movieId);\n  backdrop.classList.remove('is-hidden');\n}\n\n// Як тільки закривається модалка -> знімаємо EventListener\nfunction closeModal() {\n  document.addEventListener('keydown', pressEsc);\n  backdrop.classList.add('is-hidden');\n}\n\nfunction getModalMovieMarkup(movieId) {\n  const {\n    poster_path,\n    title,\n    original_title,\n    genres_ids,\n    release_date,\n    vote_average,\n    vote_count,\n    popularity,\n    overview,\n  } = storage.load('movies')?.find(movie => movie.id.toString() === movieId);\n\n  // movieId = movieId.toString();\n\n  const btnAddToWatched = isInLibrary('watched-list', movieId.toString())\n    ? `<button class=\"modal-movie__watched added\" data-modal-add-to=\"watched\">REMOVE FROM<br>WATCHED</button>`\n    : `<button class=\"modal-movie__watched\" data-modal-add-to=\"watched\">ADD TO<br>WATCHED</button>`;\n\n  const btnAddToQueue = isInLibrary('queue-list', movieId.toString())\n    ? `<button class=\"modal-movie__queue added\" data-modal-add-to=\"queue\">REMOVE FROM<br>QUEUE</button>`\n    : `<button class=\"modal-movie__queue\" data-modal-add-to=\"queue\">ADD TO<br>QUEUE</button>`;\n\n  return `<img class=\"modal-movie__poster\" src='https://image.tmdb.org/t/p/w500${poster_path}' alt=\"${title}\" />\n            <div class=\"modal-movie__info\">\n                <h2 class=\"modal-movie__title\">${title}</h2>\n                <table class=\"movie-table\">\n                    <tr>\n                        <td class=\"movie-table__title\">Vote / Votes</td>\n                        <td class=\"movie-table__info\">\n                            <span class=\"vote\">${vote_average}</span>\n                            <span>/</span>\n                            <span class=\"votes\">${vote_count}</span>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td class=\"movie-table__title\">Popularity</td>\n                        <td class=\"movie-table__info\">${popularity}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"movie-table__title\">Original Title</td>\n                        <td class=\"movie-table__info\">${original_title}</td>\n                    </tr>\n                    <tr>\n                        <td class=\"movie-table__title\">Genre</td>\n                        <td class=\"movie-table__info\">${genres_ids}</td>\n                    </tr>\n                </table>\n                <div class=\"modal-movie__box\">\n                <div class=\"modal-movie__about\">\n                    <p class=\"modal-movie__description\">ABOUT</p>\n                    <p class=\"modal-movie__text\">${overview}</p>\n                </div>\n                <div class=\"modal-movie__buttons\">\n                    ${btnAddToWatched}\n                    ${btnAddToQueue}\n                </div>\n                </div>\n            </div>`;\n}\n\n/* -----------------------\n\nModal buttons functionality\n\n----------------------- */\n\nfunction addMovieToLibrary(button) {\n  const key = button.dataset?.modalAddTo + '-list';\n  const movieId = button.closest('.modal-movie').dataset.modalMovieId;\n\n  const value = storage\n    .load('movies')\n    ?.find(movie => movie.id.toString() === movieId);\n  // console.dir(value.id);\n\n  let currentList = storage.load(key) || [];\n  // console.dir(currentList);\n\n  if (storage.load(key) && isInLibrary(key, value.id.toString())) {\n    button.classList.remove('added');\n    console.log(button.innerHTML);\n    button.innerHTML = button.innerHTML.replace('REMOVE FROM', 'ADD TO');\n    currentList = currentList.filter(movie => movie.id.toString() != value.id);\n  } else {\n    currentList.push(value);\n    console.log(button.innerHTML);\n    button.innerHTML = button.innerHTML.replace('ADD TO', 'REMOVE FROM');\n    button.classList.add('added');\n  }\n\n  storage.save(key, currentList);\n}\n\nfunction isInLibrary(storageKey, valueId) {\n  return storage\n    .load(storageKey)\n    ?.some(movie => movie.id.toString() === valueId);\n}\n","import storage from './storage';\n\nconst formField = document.querySelector('.form-field');\nconst homeList = document.querySelector('.home-list');\nconst spinner = document.querySelector('.spinner-loader');\nlet movieName = '';\n\nformField.addEventListener('submit', event => {\n  event.preventDefault();\n  spinner.classList.remove('is-hidden');\n  movieName = formField.elements.query.value.trim();\n  if (movieName === '') {\n    spinner.classList.add('is-hidden');\n    return alert('Empty field');\n  }\n  fetchMovies(movieName).then(({ movies }) => {\n    storage.save('movies', movies);\n    homeList.innerHTML = movieCards(movies);\n    spinner.classList.add('is-hidden');\n  });\n});\n\nexport function movieCards(movies) {\n  return movies\n    .map(\n      ({\n        id,\n        poster_path,\n        title,\n        original_title,\n        genres_ids,\n        release_date,\n      }) => {\n        const imgUrl = `https://image.tmdb.org/t/p/w500${poster_path}`;\n        const year = new Date(release_date).getFullYear();\n        return `<li class=\"home-card js-modal-open\" data-card-movie-id=\"${id}\">\n            <a href=\"#\" class=\"home-card__link\">\n                <div class=\"card-info\">\n                    <img class=\"home-card__img\" src=\"${imgUrl}\" alt=\"${title}\">\n                    <h2 class=\"card-info__title\">${original_title}</h2>\n                    <p class=\"card-info_descr\">\n                        <span>${genres_ids}</span>\n                        |\n                        <span>${year}</span>\n                    </p>\n                </div>\n            </a>\n        </li>`;\n      }\n    )\n    .join('');\n}\n\nasync function fetchMovies(movieName) {\n  const searchParams = new URLSearchParams({\n    api_key: '659c146febfafc17fd54baa17527f7fa',\n    language: 'en-US',\n    query: movieName,\n  });\n\n  return fetch(`https://api.themoviedb.org/3/search/movie?${searchParams}`)\n    .then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n      throw new Error(res.statusText);\n    })\n    .then(data => {\n      return {\n        movies: data.results,\n      };\n    });\n}\n","import { movieCards } from './fetchMovies';\n\nconst libList = document.querySelector('.library-list');\nconst queueList = document.querySelector('.js-queue-btn');\nconst btnOpenLib = document.querySelector('.js-watched-btn');\nconst btnOpenQue = document.querySelector('.js-queue-btn');\nconst libraryContainer = document.querySelector('.library-container');\n\nfunction funnyGuyOnBg() {\n    const funny = libraryContainer.classList.contains('lib-bg-img');\n    if (!libList.firstChild && !funny) {\n        libraryContainer.classList.add('lib-bg-img');\n    } else if (!libList.firstChild && funny) {\n        return;\n    } else {\n        libraryContainer.classList.remove('lib-bg-img');\n    }\n}\n\nfunction removeMarkUp(elem) {\n    elem.innerHTML = '';\n}\n\nfunction renderCardsFromLocalStoradge(key, ul) {\n    const dataLib = localStorage.getItem(key);\n    if (!dataLib) {\n        alert('Your list is empty, please fill it');\n        funnyGuyOnBg();\n        return;\n    };\n    const parsedDataLib = JSON.parse(dataLib);\n    ul.innerHTML = movieCards(parsedDataLib);\n}\n\nbtnOpenLib.addEventListener('click', openLib);\nbtnOpenQue.addEventListener('click', openQueue);\n\nfunction openLib() {\n    removeMarkUp(libList);\n    renderCardsFromLocalStoradge('watched-list', libList);\n}\n\nfunction openQueue() {\n    removeMarkUp(libList);\n    renderCardsFromLocalStoradge('queue-list', queueList);\n}\n\n\n\n\n\n\n"],"names":["$3fff5e8daf4b13a6$export$2e2bcd8739ae039","key","value","serializedState","JSON","stringify","localStorage","setItem","error","console","message","getItem","undefined","parse","removeItem","$d567087ff47545b2$export$1826db2756105efe","load","currentPage","remove","save","$8a7e756c566dd1ea$var$backdrop","document","querySelector","$8a7e756c566dd1ea$var$closeButton","$8a7e756c566dd1ea$var$pressEsc","e","code","$8a7e756c566dd1ea$var$closeModal","addEventListener","classList","add","$8a7e756c566dd1ea$var$isInLibrary","storageKey","valueId","ref","some","movie","id","toString","movieId","target","closest","preventDefault","dataset","cardMovieId","modalMovieId","innerHTML","poster_path","title","original_title","genres_ids","release_date","vote_average","vote_count","popularity","overview","find","btnAddToWatched","btnAddToQueue","$8a7e756c566dd1ea$var$getModalMovieMarkup","currentTarget","nodeName","button","ref1","modalAddTo","currentList","log","replace","filter","push","$8a7e756c566dd1ea$var$addMovieToLibrary","$16230cf6cab73dd4$var$formField","$16230cf6cab73dd4$var$homeList","$16230cf6cab73dd4$var$spinner","$16230cf6cab73dd4$var$movieName","$16230cf6cab73dd4$export$867842ca7ae981de","movies","map","Date","getFullYear","join","event","elements","query","trim","alert","async","movieName1","searchParams","URLSearchParams","api_key","language","fetch","then","res","ok","json","Error","statusText","data","results","$16230cf6cab73dd4$var$fetchMovies","$62f0f62f57de4cb0$var$libList","$62f0f62f57de4cb0$var$queueList","$62f0f62f57de4cb0$var$btnOpenLib","$62f0f62f57de4cb0$var$btnOpenQue","$62f0f62f57de4cb0$var$libraryContainer","$62f0f62f57de4cb0$var$removeMarkUp","elem","$62f0f62f57de4cb0$var$renderCardsFromLocalStoradge","ul","dataLib","funny","contains","firstChild","$62f0f62f57de4cb0$var$funnyGuyOnBg","parsedDataLib"],"version":3,"file":"library.06c4e166.js.map"}